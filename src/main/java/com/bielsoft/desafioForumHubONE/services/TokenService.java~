package com.bielsoft.desafioForumHubONE.services;

import com.auth0.jwt.JWT;
import com.auth0.jwt.JWTVerifier;
import com.auth0.jwt.algorithms.Algorithm;
import com.auth0.jwt.interfaces.DecodedJWT;
import com.bielsoft.desafioForumHubONE.dtos.TokenJWTDTO;
import com.bielsoft.desafioForumHubONE.entities.Usuario;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.time.Instant;
import java.time.LocalDateTime;
import java.time.ZoneOffset;

@Service
public class TokenService {

    @Autowired
    private DecodedJWT decodedJWT;

    public TokenJWTDTO gerarToken(Usuario usuario) {
        try {
            var algoritmo = Algorithm.HMAC256("12345678");
            String token = JWT.create()
                    .withIssuer("auth0")
                    .sign(algoritmo);
            return new TokenJWTDTO(token);
        } catch (Exception e) {
            throw new RuntimeException("erro ao gerar token jwt", e);
        }
    }


    public String getSubject(String token) {
        try {
            var algoritmo = Algorithm.HMAC256("12345678");
            JWTVerifier verifier = JWT.require(algoritmo)
                    // specify any specific claim validations
                    .withIssuer("auth0")
                    // reusable verifier instance
                    .build();

            decodedJWT = verifier.verify(token);
            return decodedJWT.getSubject();
        } catch (Exception e) {
            throw new RuntimeException("Token JWT inv√°lido ou expirado!");
        }
    }

    private Instant dataExpiracao() {
        return LocalDateTime.now().plusHours(2).toInstant(ZoneOffset.of("-03:00"));
    }
}

